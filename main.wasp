app Booking {
  wasp: {
    version: "^0.11.4"
  },
  title: "Booking",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int       @id @default(autoincrement())
    username String    @unique
    password String
    chats    Chat[]
    bookings Booking[]
psl=}

entity Driver {=psl
    id       Int       @id @default(autoincrement())
    username String    @unique
    password String
    location String
    chats    Chat[]
    bookings Booking[]
psl=}

entity Chat {=psl
    id       Int    @id @default(autoincrement())
    userId   Int
    user     User   @relation(fields: [userId], references: [id])
    driverId Int
    driver   Driver @relation(fields: [driverId], references: [id])
    message  String
psl=}

entity Booking {=psl
    id       Int    @id @default(autoincrement())
    userId   Int
    user     User   @relation(fields: [userId], references: [id])
    driverId Int
    driver   Driver @relation(fields: [driverId], references: [id])
psl=}

action createChat {
  fn: import { createChat } from "@server/actions.js",
  entities: [User, Driver, Chat]
}

action createBooking {
  fn: import { createBooking } from "@server/actions.js",
  entities: [User, Driver, Booking]
}

action updateDriverLocation {
  fn: import { updateDriverLocation } from "@server/actions.js",
  entities: [Driver]
}

query getDriverLocation {
  fn: import { getDriverLocation } from "@server/queries.js",
  entities: [Driver]
}

query getUserBookings {
  fn: import { getUserBookings } from "@server/queries.js",
  entities: [User, Booking]
}

route DriverLocationRoute { path: "/driver/:driverId/location", to: DriverLocationPage }
page DriverLocationPage {
  component: import { DriverLocation } from "@client/pages/DriverLocation.jsx",
  authRequired: true
}

route UserBookingRoute { path: "/user/:userId/bookings", to: UserBookingPage }
page UserBookingPage {
  component: import { UserBooking } from "@client/pages/UserBooking.jsx",
  authRequired: true
}

route ChatRoute { path: "/chat/:userId/:driverId", to: ChatPage }
page ChatPage {
  component: import { Chat } from "@client/pages/Chat.jsx",
  authRequired: true
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/DashboardPage.jsx",
  authRequired: true
}
